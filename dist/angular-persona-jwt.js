!function(e){"use strict";function n(e){e.interceptors.push(function(e){return{request:function(e){var n=localStorage.getItem("token");return n&&(e.headers.Authorization="Bearer "+n),e},responseError:function(n){return e.reject(n)}}})}e.module("angular-persona-jwt",["angular-persona-jwt.services","angular-persona-jwt.directives"]).config(n)}(angular),function(e){"use strict";function n(e){function n(){e.navigator.id.request()}return{restrict:"EA",scope:!0,transclude:!0,controller:function(){this.login=n},controllerAs:"persona",template:'<div ng-transclude ng-click="persona.login()"></div>'}}function o(e){function n(){e.navigator.id.logout()}return{restrict:"EA",transclude:!0,scope:!0,controller:function(){this.logout=n},controllerAs:"persona",template:'<div ng-transclude ng-click="persona.logout()"></div>'}}e.module("angular-persona-jwt.directives",[]).directive("personaLogin",n).directive("personaLogout",o)}(angular),function(e){"use strict";function n(n){function o(e,n){var o={};return o.login=function(i){var a={assertion:i,audience:r.audience};n.post(r.baseUrl+"/login",a).success(function(e){o.loggedUser=e.user,t.localStorage.setItem(r.tokenName,e.token)}).error(function(n){e.$broadcast("login:error",n)})},o.logout=function(){t.localStorage.removeItem(r.tokenName),o.loggedUser=null},t.navigator.id.watch({loggedInUser:o.loggedUser,onlogin:o.login,onlogout:o.logout}),o}var t=n.$get(),r={baseUrl:"localhost",audience:t.location.href,tokenName:"token"};this.config=function(n){r=e.extend(r,n)},this.$get=o}e.module("angular-persona-jwt.services",[]).provider("persona",n)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiZGlyZWN0aXZlcy9kaXJlY3RpdmUuanMiLCJzZXJ2aWNlcy9wcm92aWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBLEdBQ0EsWUFFQSxTQUFBLEdBQUEsR0FDQSxFQUFBLGFBQUEsS0FBQSxTQUFBLEdBQ0EsT0FDQSxRQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsYUFBQSxRQUFBLFFBSUEsT0FIQSxLQUNBLEVBQUEsUUFBQSxjQUFBLFVBQUEsR0FFQSxHQUVBLGNBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxPQUFBLE9BTUEsRUFBQSxPQUFBLHVCQUNBLCtCQUNBLG1DQUNBLE9BQUEsSUFDQSxTQ3hCQSxTQUFBLEdBQ0EsWUFFQSxTQUFBLEdBQUEsR0FDQSxRQUFBLEtBQ0EsRUFBQSxVQUFBLEdBQUEsVUFHQSxPQUNBLFNBQUEsS0FDQSxPQUFBLEVBQ0EsWUFBQSxFQUNBLFdBQUEsV0FDQSxLQUFBLE1BQUEsR0FFQSxhQUFBLFVBQ0EsU0FBQSx3REFJQSxRQUFBLEdBQUEsR0FDQSxRQUFBLEtBQ0EsRUFBQSxVQUFBLEdBQUEsU0FHQSxPQUNBLFNBQUEsS0FDQSxZQUFBLEVBQ0EsT0FBQSxFQUNBLFdBQUEsV0FDQSxLQUFBLE9BQUEsR0FFQSxhQUFBLFVBQ0EsU0FBQSx5REFJQSxFQUFBLE9BQUEscUNBQ0EsVUFBQSxlQUFBLEdBQ0EsVUFBQSxnQkFBQSxJQUVBLFNDekNBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxHQVlBLFFBQUEsR0FBQSxFQUFBLEdBQ0EsR0FBQSxLQXdCQSxPQXZCQSxHQUFBLE1BQUEsU0FBQSxHQUNBLEdBQUEsSUFDQSxVQUFBLEVBQ0EsU0FBQSxFQUFBLFNBRUEsR0FBQSxLQUFBLEVBQUEsUUFBQSxTQUFBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxXQUFBLEVBQUEsS0FDQSxFQUFBLGFBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxTQUNBLE1BQUEsU0FBQSxHQUNBLEVBQUEsV0FBQSxjQUFBLE1BSUEsRUFBQSxPQUFBLFdBQ0EsRUFBQSxhQUFBLFdBQUEsRUFBQSxXQUNBLEVBQUEsV0FBQSxNQUdBLEVBQUEsVUFBQSxHQUFBLE9BQ0EsYUFBQSxFQUFBLFdBQ0EsUUFBQSxFQUFBLE1BQ0EsU0FBQSxFQUFBLFNBRUEsRUFuQ0EsR0FBQSxHQUFBLEVBQUEsT0FDQSxHQUNBLFFBQUEsWUFDQSxTQUFBLEVBQUEsU0FBQSxLQUNBLFVBQUEsUUFFQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxPQUFBLEVBQUEsSUErQkEsS0FBQSxLQUFBLEVBSUEsRUFBQSxPQUFBLG1DQUNBLFNBQUEsVUFBQSxJQUVBIiwiZmlsZSI6ImFuZ3VsYXItcGVyc29uYS1qd3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBjb25maWcoJGh0dHBQcm92aWRlcil7XG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbiAoJHEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChodHRwQ29uZmlnKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBodHRwQ29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIHRva2VuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaHR0cENvbmZpZztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1wZXJzb25hLWp3dCcsIFtcbiAgICAnYW5ndWxhci1wZXJzb25hLWp3dC5zZXJ2aWNlcycsXG4gICAgJ2FuZ3VsYXItcGVyc29uYS1qd3QuZGlyZWN0aXZlcydcbiAgXSkuY29uZmlnKGNvbmZpZyk7XG59KShhbmd1bGFyKTtcblxuXG4iLCIoZnVuY3Rpb24oYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBwZXJzb25hTG9naW4oJHdpbmRvdyl7XG4gICAgZnVuY3Rpb24gbG9naW4oKSB7XG4gICAgICAkd2luZG93Lm5hdmlnYXRvci5pZC5yZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgc2NvcGU6IHRydWUsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvZ2luID0gbG9naW47XG4gICAgICB9LFxuICAgICAgY29udHJvbGxlckFzOiAncGVyc29uYScsXG4gICAgICB0ZW1wbGF0ZTogJzxkaXYgbmctdHJhbnNjbHVkZSBuZy1jbGljaz1cInBlcnNvbmEubG9naW4oKVwiPjwvZGl2PidcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyc29uYUxvZ291dCgkd2luZG93KXtcbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAkd2luZG93Lm5hdmlnYXRvci5pZC5sb2dvdXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgc2NvcGU6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubG9nb3V0ID0gbG9nb3V0O1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3BlcnNvbmEnLFxuICAgICAgdGVtcGxhdGU6ICc8ZGl2IG5nLXRyYW5zY2x1ZGUgbmctY2xpY2s9XCJwZXJzb25hLmxvZ291dCgpXCI+PC9kaXY+J1xuICAgIH07XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1wZXJzb25hLWp3dC5kaXJlY3RpdmVzJyxbXSlcbiAgICAuZGlyZWN0aXZlKCdwZXJzb25hTG9naW4nLCBwZXJzb25hTG9naW4pXG4gICAgLmRpcmVjdGl2ZSgncGVyc29uYUxvZ291dCcsIHBlcnNvbmFMb2dvdXQpO1xuXG59KShhbmd1bGFyKTtcblxuXG5cbiIsIihmdW5jdGlvbihhbmd1bGFyKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIHBlcnNvbmFQcm92aWRlcigkd2luZG93UHJvdmlkZXIpIHtcblxuICAgIHZhciAkd2luZG93ID0gJHdpbmRvd1Byb3ZpZGVyLiRnZXQoKSxcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGJhc2VVcmw6ICdsb2NhbGhvc3QnLFxuICAgICAgICBhdWRpZW5jZTogJHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICB0b2tlbk5hbWU6ICd0b2tlbidcbiAgICAgIH07XG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMsZGF0YSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFBlcnNvbmEoJHJvb3RTY29wZSwgJGh0dHApIHtcbiAgICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgICBzZXJ2aWNlLmxvZ2luID0gZnVuY3Rpb24gKGFzc2VydGlvbikge1xuICAgICAgICB2YXIgcGFyYW0gPSB7XG4gICAgICAgICAgYXNzZXJ0aW9uOiBhc3NlcnRpb24sXG4gICAgICAgICAgYXVkaWVuY2U6IG9wdGlvbnMuYXVkaWVuY2VcbiAgICAgICAgfTtcbiAgICAgICAgJGh0dHAucG9zdChvcHRpb25zLmJhc2VVcmwgKyAnL2xvZ2luJywgcGFyYW0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBzZXJ2aWNlLmxvZ2dlZFVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShvcHRpb25zLnRva2VuTmFtZSwgZGF0YS50b2tlbik7XG4gICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvZ2luOmVycm9yJywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzZXJ2aWNlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShvcHRpb25zLnRva2VuTmFtZSk7XG4gICAgICAgIHNlcnZpY2UubG9nZ2VkVXNlciA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICAkd2luZG93Lm5hdmlnYXRvci5pZC53YXRjaCh7XG4gICAgICAgIGxvZ2dlZEluVXNlcjogc2VydmljZS5sb2dnZWRVc2VyLFxuICAgICAgICBvbmxvZ2luOiBzZXJ2aWNlLmxvZ2luLFxuICAgICAgICBvbmxvZ291dDogc2VydmljZS5sb2dvdXRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gUGVyc29uYTtcblxuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItcGVyc29uYS1qd3Quc2VydmljZXMnLFtdKVxuICAgIC5wcm92aWRlcigncGVyc29uYScsIHBlcnNvbmFQcm92aWRlcik7XG5cbn0pKGFuZ3VsYXIpO1xuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9